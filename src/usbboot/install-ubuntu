#!/bin/busybox ash
###############################################################################
# install-ubuntu                                                              #
#                                                                             #
# RC Script to Install Ubuntu for Laptop Rehab Project                        #
#                                                                             #
#                                                                             #
#   Authors: Wolfgang Richter <wolf@cs.cmu.edu>                               #
#                                                                             #
#   Copyright 2014 Laptop Rehab Project                                       #
#                                                                             #
# Permission is hereby granted, free of charge, to any person obtaining a     #
# copy of this software and associated documentation files (the "Software"),  #
# to deal in the Software without restriction, including without limitation   #
# the rights to use, copy, modify, merge, publish, distribute, sublicense,    #
# and/or sell copies of the Software, and to permit persons to whom the       #
# Software is furnished to do so, subject to the following conditions:        #
#                                                                             #
#     The above copyright notice and this permission notice shall be included #
#     in all copies or substantial portions of the Software.                  #
#                                                                             #
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS #
#     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF              #
#     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
#     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
#     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
#     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
#                                                                             #
###############################################################################

. /etc/init.d/tc-functions

export PATH=/usr/local/sbin:/usr/local/bin:"$PATH"

# Dealing with errors
ERROR_MKDIR="Could not create mount directory."
ERROR_MOUNT="Could not mount USB partition."
ERROR_DECOMPRESS="Failed while writing to the HDD."
ERROR_MKSWAP="Failed creating swap partition."
ERROR_RESIZE2="Failed resizing partition 2."
ERROR_RESIZE5="Failed resizing partition 5."
ERROR_SYNC="Failed sync'ing to HDD."
ERROR_PARTX="Could not re-read and update partition table."
ERROR_FSCK="Failed file system check."
ERROR_RESIZE="Failed file system resize."

error() {
    message="$1"
    echo "${RED}Error: ${message}${NORMAL}"
    echo "${RED}Press ${BLUE}Enter${RED} to continue to a debug shell.${NORMAL}"
    echo "${RED}If you do not know what to do when the shell appears, just type '${BLUE}sudo poweroff${RED}' and hit '${BLUE}Enter${RED}'.${NORMAL}"
    read junk
    exit 1
}

testret() {
    if [ $1 -ne 0 ]; then
        error "$2"
    fi
}

parseopt() {
    for i in `cat /proc/cmdline`; do
        case $i in
            rescuemode*) exit 0 ;;
        esac
    done
}

testcpu() {
    CPU64="$(grep -c 'flags.*\blm\b.*' /proc/cpuinfo)"    
    
    if [ $CPU64 -eq 1 ]; then
        echo "${WHITE}Detected ${BLUE}64-bit CPU${WHITE}.${NORMAL}"
        DISKIMG="Ubuntu64.img.xz"
    else
        echo "${WHITE}Detected ${BLUE}32-bit CPU${WHITE}.${NORMAL}"
        DISKIMG="Ubuntu32.img.xz"
    fi
}

testsmart() {
    echo "${WHITE}Gathering SMART data on HDD ${BLUE}${HDD}${WHITE}.${NORMAL}"

    smartctl -H "/dev/${HDD}"
    smartstat="$(($? & 220))"

    if [ $smartstat -gt 0 ]; then
        error "${RED}HDD ${BLUE}/dev/${HDD}${RED} appears to be failing or had recent errors.${NORMAL}"
    fi
}

usbmount() {
    USBDEVICE="$(blkid -L 'CMU Laptop Rehab 32-bit' | grep 's[d|r][^0-9]*' -o)"
    USBPART="$(blkid -L 'CMU Laptop Rehab 32-bit')"
    echo "${WHITE}Found root partition at: ${BLUE}${USBPART}.${WHITE}${NORMAL}"

    if [ ! -e /mnt/$(basename ${USBPART}) ]; then
        mkdir -p /mnt/$(basename ${USBPART})
        testret $? "${ERROR_MKDIR}"
    fi

    mount "${USBPART}" /mnt/$(basename ${USBPART})
    testret $? "${ERROR_MOUNT}"

    USBMOUNT="/mnt/$(basename ${USBPART})"
    echo "${WHITE}Root partition should be mounted at: ${BLUE}${USBMOUNT}${WHITE}.${NORMAL}"
}

findhdd() {
    HDD="$(lsblk -o NAME -e 1,2,11 -b -n -d | grep -v ${USBDEVICE} | head -n 1)"
    echo "${WHITE}Target HDD: ${BLUE}/dev/${HDD}${WHITE}.${NORMAL}"
}

copyubuntu() {
    echo "${WHITE}Decompressing OS image ${BLUE}${DISKIMG}${WHITE} to HDD."
    echo "${RED}Please wait, this could take 10-15 minutes!${NORMAL}"

    xz -d -c "${USBMOUNT}/${DISKIMG}" | pv -s 6656m -p -t -e -r -B 512k > "/dev/${HDD}"
    testret $? "${ERROR_DECOMPRESS}"

    sync
    testret $? "${ERROR_SYNC}"
}

resizepart() {
    echo "${WHITE}Resizing partition.${NORMAL}"

    parted -s "/dev/${HDD}" resizepart 2 100%
    testret $? "${ERROR_RESIZE2}"

    parted -s "/dev/${HDD}" resizepart 5 100%
    testret $? "${ERROR_RESIZE5}"

    echo "${WHITE}Resizing file system.${NORMAL}"
    sync
    testret $? "${ERROR_SYNC}"

    partx -u "/dev/${HDD}"
    testret $? "${ERROR_PARTX}"

    e2fsck -f "/dev/${HDD}5"
    testret $? "${ERROR_FSCK}"

    sync
    testret $? "${ERROR_SYNC}"

    resize2fs "/dev/${HDD}5"
    testret $? "${ERROR_RESIZE}"

    sync
    testret $? "${ERROR_SYNC}"
}

waitfstab() {
    if [ -e /var/run/rebuildfstab.pid ]; then
        wait "$(cat /var/run/rebuildfstab.pid)"
    fi
}

waitfstab
parseopt
clear
echo "${GREEN}Installing Ubuntu OS${NORMAL}"
testcpu

usbmount
findhdd
testsmart
copyubuntu
resizepart

echo "${GREEN}Finished installing OS.${NORMAL}"

echo "${RED}Press ANY KEY to SHUTDOWN.${NORMAL}"
read junk
poweroff
